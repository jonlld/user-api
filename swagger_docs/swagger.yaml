# Define API specification here

# Reusable sections
responses:
  BadRequest:
    description: Bad request
    schema:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid request body
  InternalServerError:
    description: Internal server error
    schema:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Internal server error
  Unauthorized:
    description: Unauthorized
    schema:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid password

# Specification
swagger: "2.0"
info:
  title: User API - Live Documentation
  version: "1.0.0"
paths:
  /auth/register:
    post:
      # For dropdown
      tags:
        # List for multiple
        - Authentication
      summary: User Registration
      description: Register a new user with provided credentials.
      parameters:
        # list of parameter objects
        - name: body
          in: body
          description: User registration details
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: User's name
                example: Test User
              email:
                type: string
                format: email
                description: User's email address
                example: test@test.com
              password:
                type: string
                description: User's password
                example: password123
      responses:
        201:
          description: User registered successfully
        400:
          $ref: "#/responses/BadRequest"
        409:
          description: User already exists
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
                example: User already exists
        500:
          $ref: "#/responses/InternalServerError"
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Login a registered user and obtain JWT access token
      parameters:
        - name: body
          in: body
          description: User login details
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: User's email address
                example: test@test.com
              password:
                type: string
                description: User's password
                example: password123
      responses:
        200:
          description: Successfully logged in
          schema:
            type: object
            properties:
              token:
                type: string
                description: JWT token for logged-in user
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjM0NzU0MDAwLCJleHAiOjE2MzQ3NTQwNDF9.QHd3TcbxhXU5TgFwQ0TVtW5W8H4tT7dUyvRcHVlguNA
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          description: User not found
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
                example: User not found
        500:
          $ref: "#/responses/InternalServerError"
  /users/:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve id, name, and email detail for all users. Requires authorization with login token.
      security:
        - BearerAuth: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: User ID
                  example: 1
                name:
                  type: string
                  description: User's name
                  example: Test User
                email:
                  type: string
                  description: User's email address
                  example: test@test.com
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
  # { } brackets required
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID. Requires authorization with login token.
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          type: integer
      security:
        - BearerAuth: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: User ID
                  example: 1
                name:
                  type: string
                  description: User's name
                  example: Test User
                email:
                  type: string
                  description: User's email address
                  example: test@test.com
        401:
          $ref: "#/responses/Unauthorized"
        404:
          description: User not found
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error message
                example: User not found
        500:
          $ref: "#/responses/InternalServerError"
    put:
      tags:
        - Users
      summary: Update logged-in user by ID
      description: Update logged-in user's name or email by ID. Requires authorization with login token.
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          type: integer
        - name: body
          in: body
          description: Details to update
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Updated name for the user
                example: Updated User
              email:
                type: string
                description: Updated email for the user
                example: updated@test.com
      security:
        - BearerAuth: []
      responses:
        200:
          description: User updated successfully
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
    delete:
      tags:
        - Users
      summary: Delete logged-in user by ID
      description: Delete logged-in user from database by ID. Requires authorization with login token.
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          type: integer
      security:
        - BearerAuth: []
      responses:
        200:
          description: User deleted successfully
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"

# Authorization
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: INCLUDE 'BEARER ' AS PREFIX WITH TRAILING SPACE
